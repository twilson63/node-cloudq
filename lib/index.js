// Generated by CoffeeScript 1.3.3
var COMPLETE_UPDATE, DEQUEUE_UPDATE, QUEUE_VIEW, completeJob, createCompleteUpdate, createDb, createDequeueUpdate, createQView, db, dequeueJob, es, http, job, queueJob, request, status;

COMPLETE_UPDATE = "/_design/complete/_update/id/";

DEQUEUE_UPDATE = "/_design/dequeue/_update/id/";

QUEUE_VIEW = "/_design/queued/_view/name";

request = require('request');

http = require('http');

es = require('event-stream');

db = process.env.DB_URL || 'http://localhost:5984/cloudq';

module.exports = function(cb) {
  var start;
  start = function() {
    return http.createServer(function(req, res) {
      var _ref;
      _ref = req.url.split('/'), req.root = _ref[0], req.queue = _ref[1], req.queueId = _ref[2];
      if (req.method === 'POST') {
        return queueJob(req, res);
      } else if (req.method === 'DELETE') {
        return completeJob(req, res);
      } else if (req.method === 'GET') {
        return dequeueJob(req, res);
      } else {
        return status(res, 'Feature Not Implemented');
      }
    }).listen(process.env.PORT || 3000);
  };
  return request(db, {
    json: true
  }, function(e, r, b) {
    if (b.error != null) {
      createDb(function() {
        return start();
      });
    } else {
      start();
    }
    if (cb != null) {
      return cb();
    }
  });
};

queueJob = function(req, res) {
  var jobify;
  jobify = function(data, cb) {
    var json, _ref;
    json = JSON.parse(data.toString());
    json.queue = req.queue;
    json.queue_state = 'queued';
    if ((_ref = json.priority) == null) {
      json.priority = 1;
    }
    return cb(null, JSON.stringify(json));
  };
  return req.pipe(es.pipe(es.map(jobify), request.post(db, {
    json: true
  }))).pipe(res);
};

dequeueJob = function(req, res) {
  var view;
  view = QUEUE_VIEW + ("?key=%22" + req.queue + "%22&limit=1");
  return request(db + view, {
    json: true
  }, function(e, r, b) {
    var _ref, _ref1;
    if ((b != null ? (_ref = b.rows) != null ? (_ref1 = _ref[0]) != null ? _ref1.id : void 0 : void 0 : void 0) != null) {
      return request.put({
        uri: db + DEQUEUE_UPDATE + b.rows[0].id,
        json: true
      }, function(err) {
        if (err != null) {
          return status(res, err.message);
        }
        return job(res, b.rows[0].value);
      });
    } else {
      return status(res('empty'));
    }
  });
};

completeJob = function(req, res) {
  return request.put({
    uri: db + COMPLETE_UPDATE + req.queueId,
    json: true
  }, function(err) {
    return status(res, 'complete');
  });
};

status = function(res, msg) {
  res.writeHead(200, {
    'content-type': 'application/json'
  });
  return res.end(JSON.stringify({
    status: msg
  }));
};

job = function(res, job) {
  res.writeHead(200, {
    'content-type': 'application/json'
  });
  return res.end(JSON.stringify(job));
};

createDb = function(cb) {
  return request.put(db, function(e, r, b) {
    return createQView(function() {
      return createDequeueUpdate(function() {
        return createCompleteUpdate(function() {
          return cb();
        });
      });
    });
  });
};

createQView = function(cb) {
  var doc;
  doc = '{\n   "language": "javascript",\n   "views": {\n       "name": {\n           "map": "function(doc) {\n  if(doc.queue_state === \'queued\') {\n  \temit(doc.queue, doc);\n  }\n}"\n       }\n   }\n}      ';
  return request.put(db + '/_design/queued', {
    json: true,
    body: doc
  }, cb);
};

createDequeueUpdate = function(cb) {
  var doc;
  doc = '{\n   "language": "javascript",\n   "updates": {\n       "id": "function(doc) {\n  doc.queue_state = \'reserved\'; \n  return [doc, \'queue state changed\']; }"\n   }\n}';
  return request.put(db + '/_design/dequeue', {
    json: true,
    body: doc
  }, cb);
};

createCompleteUpdate = function(cb) {
  var doc;
  doc = '{\n   "language": "javascript",\n   "updates": {\n       "id": "function(doc) {\n  doc.queue_state = \'completed\'; \n  return [doc, \'queue state changed\']; }"\n   }\n}  ';
  return request.put(db + '/_design/complete', {
    json: true,
    body: doc
  }, cb);
};
